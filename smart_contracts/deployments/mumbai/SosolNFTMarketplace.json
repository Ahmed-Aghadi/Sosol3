{
  "address": "0x50227BaffC4d99A7F759BABF61F0a78383330a45",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NFTNotAvailable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NeedMoreETH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftContractNotExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sosolNFT",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "NFTCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        }
      ],
      "name": "NftMintRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        }
      ],
      "name": "NftRequested",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "x",
          "type": "address"
        }
      ],
      "name": "_addressToString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes1",
          "name": "b",
          "type": "bytes1"
        }
      ],
      "name": "char",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "c",
          "type": "bytes1"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "videoID",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "nftName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "nftSymbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "mintFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256[3]",
          "name": "sosolTokenRarity",
          "type": "uint256[3]"
        },
        {
          "internalType": "string[3]",
          "name": "sosolTokenUris",
          "type": "string[3]"
        },
        {
          "internalType": "uint256",
          "name": "sosolTotalToken",
          "type": "uint256"
        }
      ],
      "name": "createNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        }
      ],
      "name": "getNftContractOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContractOwner",
          "type": "address"
        }
      ],
      "name": "getNftContractOwnerBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        }
      ],
      "name": "getNftTotalToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTableId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTableName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContractAddress",
          "type": "address"
        }
      ],
      "name": "requestNft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x10cecb1dd4aad3978b54fc7022c04f7789f110d7ff162001e052d90c3f9319a9",
  "receipt": {
    "to": null,
    "from": "0x0de82DCC40B8468639251b089f8b4A4400022e04",
    "contractAddress": "0x50227BaffC4d99A7F759BABF61F0a78383330a45",
    "transactionIndex": 41,
    "gasUsed": "3325366",
    "logsBloom": "0x00000000000000020000000000000000000000000000000000000000000000000000000000040000000000000080000800008000000000000800000000000000000000000000000000010008000000800000000000000000000100002000000000000000020000000000000000000802000000000000000080000010000580000000000000000000000000000000000000000000000004000000000000000000200000002000000020000000000000080001000000000000000000000000004000000002000000000001000001000000000000000000000000100000000020000000000000000000000000000040000000000000000000000000000000100000",
    "blockHash": "0x73ea59f29e0cfc2dcef87ab2f53562252ca6dacf1c387bb6966002ea9850e9ff",
    "transactionHash": "0x10cecb1dd4aad3978b54fc7022c04f7789f110d7ff162001e052d90c3f9319a9",
    "logs": [
      {
        "transactionIndex": 41,
        "blockNumber": 28237086,
        "transactionHash": "0x10cecb1dd4aad3978b54fc7022c04f7789f110d7ff162001e052d90c3f9319a9",
        "address": "0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000050227baffc4d99a7f759babf61f0a78383330a45",
          "0x0000000000000000000000000000000000000000000000000000000000000a60"
        ],
        "data": "0x",
        "logIndex": 210,
        "blockHash": "0x73ea59f29e0cfc2dcef87ab2f53562252ca6dacf1c387bb6966002ea9850e9ff"
      },
      {
        "transactionIndex": 41,
        "blockNumber": 28237086,
        "transactionHash": "0x10cecb1dd4aad3978b54fc7022c04f7789f110d7ff162001e052d90c3f9319a9",
        "address": "0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x00000000000000000000000050227baffc4d99a7f759babf61f0a78383330a450000000000000000000000000000000000000000000000000000000000000a6000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000082435245415445205441424c4520736f736f6c335f38303030312028696420696e7465676572207072696d617279206b65792c2075736572416464726573732074657874204e4f54204e554c4c2c206e6674416464726573732074657874204e4f54204e554c4c2c20766964656f494420696e7465676572204e4f54204e554c4c293b000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 211,
        "blockHash": "0x73ea59f29e0cfc2dcef87ab2f53562252ca6dacf1c387bb6966002ea9850e9ff"
      },
      {
        "transactionIndex": 41,
        "blockNumber": 28237086,
        "transactionHash": "0x10cecb1dd4aad3978b54fc7022c04f7789f110d7ff162001e052d90c3f9319a9",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000000de82dcc40b8468639251b089f8b4a4400022e04",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001543ecdaf8ce0200000000000000000000000000000000000000000000000038572966e1f05b9a00000000000000000000000000000000000000000000157d37d44712fe0259af0000000000000000000000000000000000000000000000003841e57a06f78d9800000000000000000000000000000000000000000000157d37e98affd8fb27b1",
        "logIndex": 212,
        "blockHash": "0x73ea59f29e0cfc2dcef87ab2f53562252ca6dacf1c387bb6966002ea9850e9ff"
      }
    ],
    "blockNumber": 28237086,
    "cumulativeGasUsed": "11327187",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4b48841d4b32c4650e4abc117a03fe8b51f38f68",
    "0x7a1BaC17Ccc5b313516C5E16fb24f7659aA5ebed",
    "1919",
    "0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15",
    "500000"
  ],
  "numDeployments": 3,
  "solcInputHash": "f9e9384d6c3e4cfa8c7de56b92f20e0a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NFTNotAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NeedMoreETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftContractNotExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sosolNFT\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NFTCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"name\":\"NftMintRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"NftRequested\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"x\",\"type\":\"address\"}],\"name\":\"_addressToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes1\",\"name\":\"b\",\"type\":\"bytes1\"}],\"name\":\"char\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"c\",\"type\":\"bytes1\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"videoID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"nftName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nftSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"mintFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"sosolTokenRarity\",\"type\":\"uint256[3]\"},{\"internalType\":\"string[3]\",\"name\":\"sosolTokenUris\",\"type\":\"string[3]\"},{\"internalType\":\"uint256\",\"name\":\"sosolTotalToken\",\"type\":\"uint256\"}],\"name\":\"createNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"name\":\"getNftContractOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContractOwner\",\"type\":\"address\"}],\"name\":\"getNftContractOwnerBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"name\":\"getNftTotalToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTableId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTableName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"}],\"name\":\"requestNft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SosolNFTMarketplace.sol\":\"SosolNFTMarketplace\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@tableland/evm/contracts/ITablelandController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of a TablelandController compliant contract.\\n *\\n * This interface can be implemented to enabled advanced access control for a table.\\n * Call {ITablelandTables-setController} with the address of your implementation.\\n *\\n * See {test/TestTablelandController} for an example of token-gating table write-access.\\n */\\ninterface ITablelandController {\\n    /**\\n     * @dev Object defining how a table can be accessed.\\n     */\\n    struct Policy {\\n        // Whether or not the table should allow SQL INSERT statements.\\n        bool allowInsert;\\n        // Whether or not the table should allow SQL UPDATE statements.\\n        bool allowUpdate;\\n        // Whether or not the table should allow SQL DELETE statements.\\n        bool allowDelete;\\n        // A conditional clause used with SQL UPDATE and DELETE statements.\\n        // For example, a value of \\\"foo > 0\\\" will concatenate all SQL UPDATE\\n        // and/or DELETE statements with \\\"WHERE foo > 0\\\".\\n        // This can be useful for limiting how a table can be modified.\\n        // Use {Policies-joinClauses} to include more than one condition.\\n        string whereClause;\\n        // A conditional clause used with SQL INSERT statements.\\n        // For example, a value of \\\"foo > 0\\\" will concatenate all SQL INSERT\\n        // statements with a check on the incoming data, i.e., \\\"CHECK (foo > 0)\\\".\\n        // This can be useful for limiting how table data ban be added.\\n        // Use {Policies-joinClauses} to include more than one condition.\\n        string withCheck;\\n        // A list of SQL column names that can be updated.\\n        string[] updatableColumns;\\n    }\\n\\n    /**\\n     * @dev Returns a {Policy} struct defining how a table can be accessed by `caller`.\\n     */\\n    function getPolicy(address caller) external payable returns (Policy memory);\\n}\\n\",\"keccak256\":\"0xda5f7e8144be7322e66e0f6652e040d2e8409345843d225efdd11adf05cddf1d\",\"license\":\"MIT\"},\"@tableland/evm/contracts/ITablelandTables.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ITablelandController.sol\\\";\\n\\n/**\\n * @dev Interface of a TablelandTables compliant contract.\\n */\\ninterface ITablelandTables {\\n    /**\\n     * The caller is not authorized.\\n     */\\n    error Unauthorized();\\n\\n    /**\\n     * RunSQL was called with a query length greater than maximum allowed.\\n     */\\n    error MaxQuerySizeExceeded(uint256 querySize, uint256 maxQuerySize);\\n\\n    /**\\n     * @dev Emitted when `owner` creates a new table.\\n     *\\n     * owner - the to-be owner of the table\\n     * tableId - the table id of the new table\\n     * statement - the SQL statement used to create the table\\n     */\\n    event CreateTable(address owner, uint256 tableId, string statement);\\n\\n    /**\\n     * @dev Emitted when a table is transferred from `from` to `to`.\\n     *\\n     * Not emmitted when a table is created.\\n     * Also emitted after a table has been burned.\\n     *\\n     * from - the address that transfered the table\\n     * to - the address that received the table\\n     * tableId - the table id that was transferred\\n     */\\n    event TransferTable(address from, address to, uint256 tableId);\\n\\n    /**\\n     * @dev Emitted when `caller` runs a SQL statement.\\n     *\\n     * caller - the address that is running the SQL statement\\n     * isOwner - whether or not the caller is the table owner\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     * policy - an object describing how `caller` can interact with the table (see {ITablelandController.Policy})\\n     */\\n    event RunSQL(\\n        address caller,\\n        bool isOwner,\\n        uint256 tableId,\\n        string statement,\\n        ITablelandController.Policy policy\\n    );\\n\\n    /**\\n     * @dev Emitted when a table's controller is set.\\n     *\\n     * tableId - the id of the target table\\n     * controller - the address of the controller (EOA or contract)\\n     */\\n    event SetController(uint256 tableId, address controller);\\n\\n    /**\\n     * @dev Creates a new table owned by `owner` using `statement` and returns its `tableId`.\\n     *\\n     * owner - the to-be owner of the new table\\n     * statement - the SQL statement used to create the table\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     */\\n    function createTable(address owner, string memory statement)\\n        external\\n        payable\\n        returns (uint256);\\n\\n    /**\\n     * @dev Runs a SQL statement for `caller` using `statement`.\\n     *\\n     * caller - the address that is running the SQL statement\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` or contract owner\\n     * - `tableId` must exist\\n     * - `caller` must be authorized by the table controller\\n     * - `statement` must be less than or equal to 35000 bytes\\n     */\\n    function runSQL(\\n        address caller,\\n        uint256 tableId,\\n        string memory statement\\n    ) external payable;\\n\\n    /**\\n     * @dev Sets the controller for a table. Controller can be an EOA or contract address.\\n     *\\n     * When a table is created, it's controller is set to the zero address, which means that the\\n     * contract will not enforce write access control. In this situation, validators will not accept\\n     * transactions from non-owners unless explicitly granted access with \\\"GRANT\\\" SQL statements.\\n     *\\n     * When a controller address is set for a table, validators assume write access control is\\n     * handled at the contract level, and will accept all transactions.\\n     *\\n     * You can unset a controller address for a table by setting it back to the zero address.\\n     * This will cause validators to revert back to honoring owner and GRANT bases write access control.\\n     *\\n     * caller - the address that is setting the controller\\n     * tableId - the id of the target table\\n     * controller - the address of the controller (EOA or contract)\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` or contract owner and owner of `tableId`\\n     * - `tableId` must exist\\n     * - `tableId` controller must not be locked\\n     */\\n    function setController(\\n        address caller,\\n        uint256 tableId,\\n        address controller\\n    ) external;\\n\\n    /**\\n     * @dev Returns the controller for a table.\\n     *\\n     * tableId - the id of the target table\\n     */\\n    function getController(uint256 tableId) external returns (address);\\n\\n    /**\\n     * @dev Locks the controller for a table _forever_. Controller can be an EOA or contract address.\\n     *\\n     * Although not very useful, it is possible to lock a table controller that is set to the zero address.\\n     *\\n     * caller - the address that is locking the controller\\n     * tableId - the id of the target table\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` or contract owner and owner of `tableId`\\n     * - `tableId` must exist\\n     * - `tableId` controller must not be locked\\n     */\\n    function lockController(address caller, uint256 tableId) external;\\n\\n    /**\\n     * @dev Sets the contract base URI.\\n     *\\n     * baseURI - the new base URI\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     */\\n    function setBaseURI(string memory baseURI) external;\\n\\n    /**\\n     * @dev Pauses the contract.\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     * - contract must be unpaused\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Unpauses the contract.\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     * - contract must be paused\\n     */\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0x597bb13cc0f1990cee44a423601b16a383fd9a405874eed18f7d5045a9cffa2f\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/SosolNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nimport \\\"base64-sol/base64.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract SosolNFT is ERC721URIStorage, Ownable {\\n    uint256 private immutable i_mintFee;\\n    uint256 private s_tokenCounter;\\n    uint256 public s_requestId;\\n    string[] private s_sosolTokenUris;\\n    uint256[] private s_sosolTokenRarity;\\n    uint256 private s_sosolTotalToken;\\n    uint256 private constant MAX_CHANCE_VALUE = 100;\\n\\n    // Events\\n    event NftMinted(uint256 index, address minter);\\n\\n    /* Functions */\\n    constructor(\\n        string memory nftName,\\n        string memory nftSymbol,\\n        uint256 mintFee,\\n        uint256[3] memory sosolTokenRarity,\\n        string[3] memory sosolTokenUris,\\n        uint256 sosolTotalToken\\n    ) ERC721(nftName, nftSymbol) {\\n        i_mintFee = mintFee;\\n        s_sosolTotalToken = sosolTotalToken;\\n        s_sosolTokenRarity = sosolTokenRarity;\\n        s_sosolTokenUris = sosolTokenUris;\\n    }\\n\\n    function mint(address nftOwner, uint256 randomWord) public onlyOwner {\\n        s_sosolTotalToken -= 1;\\n        uint256 newItemId = s_tokenCounter;\\n        s_tokenCounter = s_tokenCounter + 1;\\n        uint256 moddedRng = randomWord % MAX_CHANCE_VALUE;\\n        uint256 tokenIndex = 0;\\n        if (moddedRng < s_sosolTokenRarity[0]) {\\n            tokenIndex = 0;\\n        } else if (moddedRng < s_sosolTokenRarity[0] + s_sosolTokenRarity[1]) {\\n            tokenIndex = 1;\\n        } else {\\n            tokenIndex = 2;\\n        }\\n        _safeMint(nftOwner, newItemId);\\n        _setTokenURI(newItemId, s_sosolTokenUris[tokenIndex]);\\n        emit NftMinted(tokenIndex, nftOwner);\\n    }\\n\\n    function getMintFee() public view returns (uint256) {\\n        return i_mintFee;\\n    }\\n\\n    function getSosolTokenUris(uint256 index) public view returns (string memory) {\\n        return s_sosolTokenUris[index];\\n    }\\n\\n    function getSosolTokenRarity(uint256 index) public view returns (uint256) {\\n        return s_sosolTokenRarity[index];\\n    }\\n\\n    function getSosolTotalToken() public view returns (uint256) {\\n        return s_sosolTotalToken;\\n    }\\n\\n    function getTokenCounter() public view returns (uint256) {\\n        return s_tokenCounter;\\n    }\\n}\\n\",\"keccak256\":\"0x8a962a92712269ca61aba504f763ce6fc6f951c470fb1dc366e60c314e1e0b36\",\"license\":\"MIT\"},\"contracts/SosolNFTHandle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nimport \\\"./SosolNFT.sol\\\";\\nimport \\\"./SosolNFTTableland.sol\\\";\\n\\nerror NeedMoreETH();\\nerror NFTNotAvailable();\\nerror WithdrawFailed();\\nerror NftContractNotExists();\\n\\ncontract SosolNFTHandle is SosolNFTTableland {\\n    struct NftRequest {\\n        address requester;\\n        address nftContract;\\n    }\\n    event NFTCreated(address sosolNFT, address owner);\\n    event NftRequested(uint256 requestId, address requester);\\n    event NftMintRequested(address minter, address nftContract);\\n\\n    mapping(address => address) private nftToOwner;\\n    // VRF Helpers\\n    mapping(uint256 => NftRequest) private s_requestIdToNftRequest;\\n    mapping(address => uint256) private ownerToBalance;\\n    mapping(address => uint256) private nftToTotalToken;\\n\\n    constructor(address registry) SosolNFTTableland(registry) {}\\n\\n    function _createNFT(\\n        address msgSender,\\n        uint256 videoID,\\n        string memory nftName,\\n        string memory nftSymbol,\\n        uint256 mintFee,\\n        uint256[3] memory sosolTokenRarity,\\n        string[3] memory sosolTokenUris,\\n        uint256 sosolTotalToken\\n    ) internal virtual {\\n        SosolNFT sosolNFT = new SosolNFT(\\n            nftName,\\n            nftSymbol,\\n            mintFee,\\n            sosolTokenRarity,\\n            sosolTokenUris,\\n            sosolTotalToken\\n        );\\n        nftToTotalToken[address(sosolNFT)] = sosolTotalToken;\\n        nftToOwner[address(sosolNFT)] = msgSender;\\n        // \\\" (id integer primary key, userAddress text NOT NULL, nftAddress text NOT NULL, videoID integer NOT NULL);\\\"\\n        _createNftEntry(msgSender, address(sosolNFT), videoID);\\n        emit NFTCreated(address(sosolNFT), msgSender);\\n    }\\n\\n    // Assumes the subscription is funded sufficiently.\\n    function _requestNft(address nftContractAddress, uint256 requestId) internal virtual {\\n        if (nftToOwner[nftContractAddress] != address(0)) {\\n            revert NftContractNotExists();\\n        }\\n        SosolNFT sosolNFT = SosolNFT(nftContractAddress);\\n        if (msg.value < sosolNFT.getMintFee()) {\\n            revert NeedMoreETH();\\n        }\\n        if (nftToTotalToken[nftContractAddress] == 0) {\\n            revert NFTNotAvailable();\\n        }\\n\\n        nftToTotalToken[nftContractAddress] -= 1;\\n\\n        s_requestIdToNftRequest[requestId] = NftRequest(msg.sender, nftContractAddress);\\n        emit NftRequested(requestId, msg.sender);\\n    }\\n\\n    /**\\n     * @dev This is the function that Chainlink VRF node\\n     * calls.\\n     */\\n    function _fulfillRandomWords(\\n        uint256 requestId, /* requestId */\\n        uint256[] memory randomWords\\n    ) internal virtual {\\n        address nftOwner = s_requestIdToNftRequest[requestId].requester;\\n        address nftAddress = s_requestIdToNftRequest[requestId].nftContract;\\n        SosolNFT nftContract = SosolNFT(nftAddress);\\n        nftContract.mint(nftOwner, randomWords[0]);\\n        ownerToBalance[nftToOwner[nftAddress]] = nftContract.getMintFee();\\n        emit NftMintRequested(nftOwner, nftAddress);\\n    }\\n\\n    function _withdraw(address msgSender) internal virtual {\\n        require(ownerToBalance[msgSender] > 0);\\n        uint256 amount = ownerToBalance[msgSender];\\n        ownerToBalance[msgSender] = 0;\\n        (bool success, ) = payable(msgSender).call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert WithdrawFailed();\\n        }\\n    }\\n\\n    function getNftContractOwner(address nftContract) public view returns (address) {\\n        return nftToOwner[nftContract];\\n    }\\n\\n    function getNftContractOwnerBalance(address nftContractOwner) public view returns (uint256) {\\n        return ownerToBalance[nftContractOwner];\\n    }\\n\\n    function getNftTotalToken(address nftContract) public view returns (uint256) {\\n        return nftToTotalToken[nftContract];\\n    }\\n}\\n\",\"keccak256\":\"0x52c7e20b3ca7d554a3f843f95d95d15f0e047c7f72a4e70c73c958fbb1a92af2\",\"license\":\"MIT\"},\"contracts/SosolNFTMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"./SosolNFTTableland.sol\\\";\\nimport \\\"./SosolNFTHandle.sol\\\";\\n\\ncontract SosolNFTMarketplace is ERC721Holder, VRFConsumerBaseV2, SosolNFTTableland, SosolNFTHandle {\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    uint64 private immutable i_subscriptionId;\\n    bytes32 private immutable i_gasLane;\\n    uint32 private immutable i_callbackGasLimit;\\n\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private constant NUM_WORDS = 1;\\n\\n    constructor(\\n        address registry,\\n        address vrfCoordinatorV2,\\n        uint64 subscriptionId,\\n        bytes32 gasLane, // keyH\\n        uint32 callbackGasLimit\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) SosolNFTHandle(registry) {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n    }\\n\\n    function createNFT(\\n        uint256 videoID,\\n        string memory nftName,\\n        string memory nftSymbol,\\n        uint256 mintFee,\\n        uint256[3] memory sosolTokenRarity,\\n        string[3] memory sosolTokenUris,\\n        uint256 sosolTotalToken\\n    ) public {\\n        _createNFT(\\n            msg.sender,\\n            videoID,\\n            nftName,\\n            nftSymbol,\\n            mintFee,\\n            sosolTokenRarity,\\n            sosolTokenUris,\\n            sosolTotalToken\\n        );\\n    }\\n\\n    // Assumes the subscription is funded sufficiently.\\n    function requestNft(address nftContractAddress) public payable returns (uint256 requestId) {\\n        requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        _requestNft(nftContractAddress, requestId);\\n    }\\n\\n    /**\\n     * @dev This is the function that Chainlink VRF node\\n     * calls.\\n     */\\n    function fulfillRandomWords(\\n        uint256 requestId, /* requestId */\\n        uint256[] memory randomWords\\n    ) internal override {\\n        _fulfillRandomWords(requestId, randomWords);\\n    }\\n\\n    function withdraw() public {\\n        _withdraw(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x109707594d8a66464ab6615f8689e3101a52169701c070cd91efba1fe56f1558\",\"license\":\"MIT\"},\"contracts/SosolNFTTableland.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nimport \\\"@tableland/evm/contracts/ITablelandTables.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract SosolNFTTableland {\\n    uint256 private _tableId;\\n    string private _tableName;\\n    string private _prefix = \\\"sosol3\\\";\\n    // Interface to the `TablelandTables` registry contract\\n    ITablelandTables private _tableland;\\n\\n    constructor(address registry) {\\n        _tableland = ITablelandTables(registry);\\n        _tableId = _tableland.createTable(\\n            address(this),\\n            /*\\n             *  CREATE TABLE {prefix}_{chainId} (\\n             *    id integer primary key,\\n             *    message text\\n             *  );\\n             */\\n            string.concat(\\n                \\\"CREATE TABLE \\\",\\n                _prefix,\\n                \\\"_\\\",\\n                Strings.toString(block.chainid),\\n                \\\" (id integer primary key, userAddress text NOT NULL, nftAddress text NOT NULL, videoID integer NOT NULL);\\\"\\n            )\\n        );\\n\\n        _tableName = string.concat(\\n            _prefix,\\n            \\\"_\\\",\\n            Strings.toString(block.chainid),\\n            \\\"_\\\",\\n            Strings.toString(_tableId)\\n        );\\n    }\\n\\n    function _createNftEntry(\\n        address userAddress,\\n        address nftAddress,\\n        uint256 videoID\\n    ) internal virtual {\\n        _tableland.runSQL(\\n            address(this),\\n            _tableId,\\n            string.concat(\\n                \\\"INSERT INTO \\\",\\n                _tableName,\\n                \\\" (userAddress, nftAddress, videoID) VALUES (\\\",\\n                \\\"'\\\",\\n                _addressToString(userAddress),\\n                \\\"','\\\",\\n                _addressToString(nftAddress),\\n                \\\"','\\\",\\n                Strings.toString(videoID),\\n                \\\"');\\\"\\n            )\\n        );\\n    }\\n\\n    function _addressToString(address x) public pure returns (string memory) {\\n        bytes memory s = new bytes(40);\\n        for (uint256 i = 0; i < 20; i++) {\\n            bytes1 b = bytes1(uint8(uint256(uint160(x)) / (2**(8 * (19 - i)))));\\n            bytes1 hi = bytes1(uint8(b) / 16);\\n            bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n            s[2 * i] = char(hi);\\n            s[2 * i + 1] = char(lo);\\n        }\\n        return string.concat(\\\"0x\\\", string(s));\\n    }\\n\\n    function char(bytes1 b) public pure returns (bytes1 c) {\\n        if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n        else return bytes1(uint8(b) + 0x57);\\n    }\\n\\n    function getTableId() public view returns (uint256) {\\n        return _tableId;\\n    }\\n\\n    function getTableName() public view returns (string memory) {\\n        return _tableName;\\n    }\\n}\\n\",\"keccak256\":\"0x84cea4aabef18fdb0f8bca8128f45713e69ea6e7ed053f205c50f529b750c156\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610160604052600661012081905265736f736f6c3360d01b6101409081526200002c9160029190620002e9565b503480156200003a57600080fd5b5060405162003fa938038062003fa98339810160408190526200005d91620003ac565b6001600160a01b03848116608052600380546001600160a01b031916918716918217905585908190633a9151b0306002620000a446620001cc602090811b6200074317901c565b604051602001620000b792919062000540565b6040516020818303038152906040526040518363ffffffff1660e01b8152600401620000e592919062000614565b6020604051808303816000875af115801562000105573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200012b919062000658565b60008190555060026200014946620001cc60201b620007431760201c565b62000161600054620001cc60201b620007431760201c565b604051602001620001759392919062000672565b604051602081830303815290604052600190805190602001906200019b929190620002e9565b5050506001600160a01b0390931660a05260e0526001600160401b031660c05263ffffffff166101005250620007a0565b606081620001f15750506040805180820190915260018152600360fc1b602082015290565b8160005b81156200022157806200020881620006dd565b9150620002199050600a8362000711565b9150620001f5565b6000816001600160401b038111156200023e576200023e62000728565b6040519080825280601f01601f19166020018201604052801562000269576020820181803683370190505b5090505b8415620002e157620002816001836200073e565b915062000290600a8662000758565b6200029d9060306200076f565b60f81b818381518110620002b557620002b56200078a565b60200101906001600160f81b031916908160001a905350620002d9600a8662000711565b94506200026d565b949350505050565b828054620002f7906200042e565b90600052602060002090601f0160209004810192826200031b576000855562000366565b82601f106200033657805160ff191683800117855562000366565b8280016001018555821562000366579182015b828111156200036657825182559160200191906001019062000349565b506200037492915062000378565b5090565b5b8082111562000374576000815560010162000379565b80516001600160a01b0381168114620003a757600080fd5b919050565b600080600080600060a08688031215620003c557600080fd5b620003d0866200038f565b9450620003e0602087016200038f565b60408701519094506001600160401b0381168114620003fe57600080fd5b60608701516080880151919450925063ffffffff811681146200042057600080fd5b809150509295509295909350565b600181811c908216806200044357607f821691505b602082108114156200046557634e487b7160e01b600052602260045260246000fd5b50919050565b8054600090600181811c90808316806200048657607f831692505b6020808410821415620004a957634e487b7160e01b600052602260045260246000fd5b818015620004c05760018114620004d25762000501565b60ff1986168952848901965062000501565b60008881526020902060005b86811015620004f95781548b820152908501908301620004de565b505084890196505b50505050505092915050565b60005b838110156200052a57818101518382015260200162000510565b838111156200053a576000848401525b50505050565b6c021a922a0aa22902a20a126229609d1b8152600062000564600d8301856200046b565b605f60f81b81528351620005808160018401602088016200050d565b7f2028696420696e7465676572207072696d617279206b65792c20757365724164600192909101918201527f64726573732074657874204e4f54204e554c4c2c206e6674416464726573732060218201527f74657874204e4f54204e554c4c2c20766964656f494420696e7465676572204e6041820152684f54204e554c4c293b60b81b6061820152606a01949350505050565b60018060a01b03831681526040602082015260008251806040840152620006438160608501602087016200050d565b601f01601f1916919091016060019392505050565b6000602082840312156200066b57600080fd5b5051919050565b60006200068082866200046b565b605f60f81b80825285516200069d816001850160208a016200050d565b60019201918201528351620006ba8160028401602088016200050d565b0160020195945050505050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415620006f457620006f4620006c7565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082620007235762000723620006fb565b500490565b634e487b7160e01b600052604160045260246000fd5b600082821015620007535762000753620006c7565b500390565b6000826200076a576200076a620006fb565b500690565b60008219821115620007855762000785620006c7565b500190565b634e487b7160e01b600052603260045260246000fd5b60805160a05160c05160e051610100516137bd620007ec60003960006106710152600061060f0152600061063e015260006106a2015260008181610308015261034b01526137bd6000f3fe608060405260043610620000b55760003560e01c806374fad9b7116200006c57806374fad9b714620001f557806388e4f1cb146200024b57806388e9a48a1462000262578063bca89cc31462000287578063c75ee78414620002c1578063c7dc7e6214620002d857600080fd5b80630b30f7bb14620000ba578063150b7a0214620001075780631fe543e314620001505780633ccfd60b14620001775780635d5a33a2146200018f57806369f9ad2f14620001b6575b600080fd5b348015620000c757600080fd5b50620000f4620000d936600462000e12565b6001600160a01b031660009081526007602052604090205490565b6040519081526020015b60405180910390f35b3480156200011457600080fd5b50620001366200012636600462000f0b565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001620000fe565b3480156200015d57600080fd5b50620001756200016f36600462000f90565b620002fd565b005b3480156200018457600080fd5b50620001756200038c565b3480156200019c57600080fd5b50620001a762000399565b604051620000fe9190620010ae565b348015620001c357600080fd5b50620001db620001d5366004620010c3565b62000433565b6040516001600160f81b03199091168152602001620000fe565b3480156200020257600080fd5b50620002326200021436600462000e12565b6001600160a01b039081166000908152600460205260409020541690565b6040516001600160a01b039091168152602001620000fe565b3480156200025857600080fd5b50600054620000f4565b3480156200026f57600080fd5b50620001a76200028136600462000e12565b62000473565b3480156200029457600080fd5b50620000f4620002a636600462000e12565b6001600160a01b031660009081526006602052604090205490565b620000f4620002d236600462000e12565b62000600565b348015620002e557600080fd5b5062000175620002f73660046200118e565b62000728565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146200037c5760405163073e64fd60e21b81523360048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016602482015260440160405180910390fd5b62000388828262000861565b5050565b62000397336200086d565b565b606060018054620003aa9062001291565b80601f0160208091040260200160405190810160405280929190818152602001828054620003d89062001291565b8015620004295780601f10620003fd5761010080835404028352916020019162000429565b820191906000526020600020905b8154815290600101906020018083116200040b57829003601f168201915b5050505050905090565b6000600a60f883901c10156200045d576200045460f883901c6030620012e4565b60f81b92915050565b6200045460f883901c6057620012e4565b919050565b60408051602880825260608281019093526000919060208201818036833701905050905060005b6014811015620005d5576000620004b38260136200130c565b620004c090600862001326565b620004cd90600262001447565b620004e2906001600160a01b0387166200146b565b60f81b9050600060108260f81c620004fb919062001482565b60f81b905060008160f81c6010620005149190620014a7565b8360f81c620005249190620014cb565b60f81b9050620005348262000433565b856200054286600262001326565b81518110620005555762000555620014f1565b60200101906001600160f81b031916908160001a905350620005778162000433565b856200058586600262001326565b6200059290600162001507565b81518110620005a557620005a5620014f1565b60200101906001600160f81b031916908160001a9053505050508080620005cc9062001522565b9150506200049a565b5080604051602001620005e991906200155e565b604051602081830303815290604052915050919050565b6040516305d3b1d360e41b81527f0000000000000000000000000000000000000000000000000000000000000000600482015267ffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001660248201526003604482015263ffffffff7f0000000000000000000000000000000000000000000000000000000000000000166064820152600160848201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635d3b1d309060a4016020604051808303816000875af1158015620006f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200071a91906200158a565b90506200046e82826200091d565b6200073a338888888888888862000adb565b50505050505050565b606081620007685750506040805180820190915260018152600360fc1b602082015290565b8160005b81156200079857806200077f8162001522565b9150620007909050600a836200146b565b91506200076c565b60008167ffffffffffffffff811115620007b657620007b662000e37565b6040519080825280601f01601f191660200182016040528015620007e1576020820181803683370190505b5090505b84156200085957620007f96001836200130c565b915062000808600a86620015a4565b6200081590603062001507565b60f81b8183815181106200082d576200082d620014f1565b60200101906001600160f81b031916908160001a90535062000851600a866200146b565b9450620007e5565b949350505050565b62000388828262000bb8565b6001600160a01b0381166000908152600660205260409020546200089057600080fd5b6001600160a01b038116600081815260066020526040808220805490839055905190929083908381818185875af1925050503d8060008114620008f0576040519150601f19603f3d011682016040523d82523d6000602084013e620008f5565b606091505b50509050806200091857604051631d42c86760e21b815260040160405180910390fd5b505050565b6001600160a01b0382811660009081526004602052604090205416156200095757604051639ac95c8560e01b815260040160405180910390fd5b6000829050806001600160a01b0316637a5caab36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200099b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009c191906200158a565b341015620009e257604051633b7f4ae160e21b815260040160405180910390fd5b6001600160a01b03831660009081526007602052604090205462000a195760405163314a94b160e21b815260040160405180910390fd5b6001600160a01b038316600090815260076020526040812080546001929062000a449084906200130c565b9091555050604080518082018252338082526001600160a01b038681166020808501918252600088815260058252869020945185549084166001600160a01b031991821617865591516001909501805495909316949091169390931790558251858152918201527ff873236e6cc0ecc5be1a9a35c95ee5b8d1ac4cc7bfef0cc5060391d6cc98e26b910160405180910390a1505050565b600086868686868660405162000af19062000dec565b62000b0296959493929190620015bb565b604051809103906000f08015801562000b1f573d6000803e3d6000fd5b506001600160a01b0381811660009081526007602090815260408083208790556004909152902080546001600160a01b031916918c16919091179055905062000b6a89828a62000d3b565b604080516001600160a01b0380841682528b1660208201527fe4944a5f0bf5ee82c3c6769e53000a678b52be77b461a2e8f7b3434eff94670e910160405180910390a1505050505050505050565b6000828152600560205260408120805460019091015483516001600160a01b03928316939290911691829182916340c10f19918691889162000bfe5762000bfe620014f1565b60200260200101516040518363ffffffff1660e01b815260040162000c389291906001600160a01b03929092168252602082015260400190565b600060405180830381600087803b15801562000c5357600080fd5b505af115801562000c68573d6000803e3d6000fd5b50505050806001600160a01b0316637a5caab36040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000cab573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000cd191906200158a565b6001600160a01b038381166000818152600460209081526040808320548516835260068252918290209490945580519287168352928201527f3bcfcfcdfd0ae90e20ca88989406bac380d49b0e6051a0acf56959587b2abd2a910160405180910390a15050505050565b6003546000546001600160a01b039091169063eaf5d04e903090600162000d628862000473565b62000d6d8862000473565b62000d788862000743565b60405160200162000d8d949392919062001674565b6040516020818303038152906040526040518463ffffffff1660e01b815260040162000dbc93929190620017d3565b600060405180830381600087803b15801562000dd757600080fd5b505af11580156200073a573d6000803e3d6000fd5b611f82806200180683390190565b80356001600160a01b03811681146200046e57600080fd5b60006020828403121562000e2557600080fd5b62000e308262000dfa565b9392505050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff8111828210171562000e735762000e7362000e37565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171562000ea55762000ea562000e37565b604052919050565b600067ffffffffffffffff83111562000eca5762000eca62000e37565b62000edf601f8401601f191660200162000e79565b905082815283838301111562000ef457600080fd5b828260208301376000602084830101529392505050565b6000806000806080858703121562000f2257600080fd5b62000f2d8562000dfa565b935062000f3d6020860162000dfa565b925060408501359150606085013567ffffffffffffffff81111562000f6157600080fd5b8501601f8101871362000f7357600080fd5b62000f848782356020840162000ead565b91505092959194509250565b6000806040838503121562000fa457600080fd5b8235915060208084013567ffffffffffffffff8082111562000fc557600080fd5b818601915086601f83011262000fda57600080fd5b81358181111562000fef5762000fef62000e37565b8060051b91506200100284830162000e79565b81815291830184019184810190898411156200101d57600080fd5b938501935b838510156200103d5784358252938501939085019062001022565b8096505050505050509250929050565b60005b838110156200106a57818101518382015260200162001050565b838111156200107a576000848401525b50505050565b600081518084526200109a8160208601602086016200104d565b601f01601f19169290920160200192915050565b60208152600062000e30602083018462001080565b600060208284031215620010d657600080fd5b81356001600160f81b03198116811462000e3057600080fd5b600082601f8301126200110157600080fd5b62000e308383356020850162000ead565b600082601f8301126200112457600080fd5b6200112e62000e4d565b8060608401858111156200114157600080fd5b845b818110156200118357803567ffffffffffffffff811115620011655760008081fd5b6200117388828901620010ef565b8552506020938401930162001143565b509095945050505050565b6000806000806000806000610120888a031215620011ab57600080fd5b8735965060208089013567ffffffffffffffff80821115620011cc57600080fd5b620011da8c838d01620010ef565b985060408b0135915080821115620011f157600080fd5b620011ff8c838d01620010ef565b975060608b013596508b609f8c01126200121857600080fd5b6200122262000e4d565b91508160e08c018d8111156200123757600080fd5b60808d015b818110156200125557803585529385019385016200123c565b50909650359250808311156200126a57600080fd5b50506200127a8a828b0162001112565b925050610100880135905092959891949750929550565b600181811c90821680620012a657607f821691505b60208210811415620012c857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff84168060ff03821115620013045762001304620012ce565b019392505050565b600082821015620013215762001321620012ce565b500390565b6000816000190483118215151615620013435762001343620012ce565b500290565b600181815b80851115620013895781600019048211156200136d576200136d620012ce565b808516156200137b57918102915b93841c93908002906200134d565b509250929050565b600082620013a25750600162001441565b81620013b15750600062001441565b8160018114620013ca5760028114620013d557620013f5565b600191505062001441565b60ff841115620013e957620013e9620012ce565b50506001821b62001441565b5060208310610133831016604e8410600b84101617156200141a575081810a62001441565b62001426838362001348565b80600019048211156200143d576200143d620012ce565b0290505b92915050565b600062000e30838362001391565b634e487b7160e01b600052601260045260246000fd5b6000826200147d576200147d62001455565b500490565b600060ff83168062001498576200149862001455565b8060ff84160491505092915050565b600060ff821660ff84168160ff04811182151516156200143d576200143d620012ce565b600060ff821660ff841680821015620014e857620014e8620012ce565b90039392505050565b634e487b7160e01b600052603260045260246000fd5b600082198211156200151d576200151d620012ce565b500190565b6000600019821415620015395762001539620012ce565b5060010190565b60008151620015548185602086016200104d565b9290920192915050565b61060f60f31b8152600082516200157d8160028501602087016200104d565b9190910160020192915050565b6000602082840312156200159d57600080fd5b5051919050565b600082620015b657620015b662001455565b500690565b6000610100808352620015d18184018a62001080565b9050602083820381850152620015e8828a62001080565b9150876040850152606084018760005b60038110156200161757815183529183019190830190600101620015f8565b50505083820360c085015281606081018760005b60038110156200165a5785830384526200164783835162001080565b938501939250908401906001016200162b565b5050809450505050508260e0830152979650505050505050565b6b024a729a2a92a1024a72a27960a51b81526000600c6000875481600182811c915080831680620016a657607f831692505b6020808410821415620016c757634e487b7160e01b86526022600452602486fd5b818015620016de5760018114620016f45762001727565b60ff1986168a890152848a018801965062001727565b60008e81526020902060005b868110156200171d5781548c82018b015290850190830162001700565b505087858b010196505b50507f202875736572416464726573732c206e6674416464726573732c20766964656f8552506b092885240ac8298aa8aa640560a31b6020850152602c8401602760f81b815294506200177d8186018b62001540565b945050505050620017938162272c2760e81b9052565b620017a2600382018662001540565b62272c2760e81b81529050620017bc600382018562001540565b6227293b60e81b8152600301979650505050505050565b60018060a01b0384168152826020820152606060408201526000620017fc606083018462001080565b9594505050505056fe60a06040523480156200001157600080fd5b5060405162001f8238038062001f82833981016040819052620000349162000436565b8551869086906200004d9060009060208501906200010c565b508051620000639060019060208401906200010c565b505050620000806200007a620000b660201b60201c565b620000ba565b6080849052600c81905562000099600b8460036200019b565b50620000a9600a836003620001d8565b5050505050505062000568565b3390565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546200011a906200052b565b90600052602060002090601f0160209004810192826200013e576000855562000189565b82601f106200015957805160ff191683800117855562000189565b8280016001018555821562000189579182015b82811115620001895782518255916020019190600101906200016c565b506200019792915062000238565b5090565b828054828255906000526020600020908101928215620001895791602002820182811115620001895782518255916020019190600101906200016c565b8280548282559060005260206000209081019282156200022a579160200282015b828111156200022a5782518051620002199184916020909101906200010c565b5091602001919060010190620001f9565b50620001979291506200024f565b5b8082111562000197576000815560010162000239565b808211156200019757600062000266828262000270565b506001016200024f565b5080546200027e906200052b565b6000825580601f106200028f575050565b601f016020900490600052602060002090810190620002af919062000238565b50565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b0381118282101715620002ed57620002ed620002b2565b60405290565b604051601f8201601f191681016001600160401b03811182821017156200031e576200031e620002b2565b604052919050565b600082601f8301126200033857600080fd5b81516001600160401b03811115620003545762000354620002b2565b60206200036a601f8301601f19168201620002f3565b82815285828487010111156200037f57600080fd5b60005b838110156200039f57858101830151828201840152820162000382565b83811115620003b15760008385840101525b5095945050505050565b600082601f830112620003cd57600080fd5b620003d7620002c8565b806060840185811115620003ea57600080fd5b845b818110156200042b5780516001600160401b038111156200040d5760008081fd5b6200041b8882890162000326565b85525060209384019301620003ec565b509095945050505050565b60008060008060008061010087890312156200045157600080fd5b86516001600160401b03808211156200046957600080fd5b620004778a838b0162000326565b97506020915081890151818111156200048f57600080fd5b6200049d8b828c0162000326565b9750506040890151955089607f8a0112620004b757600080fd5b620004c1620002c8565b8060c08b018c811115620004d457600080fd5b60608c015b81811015620004f25780518452928501928501620004d9565b5051909650925050808211156200050857600080fd5b506200051789828a01620003bb565b92505060e087015190509295509295509295565b600181811c908216806200054057607f821691505b602082108114156200056257634e487b7160e01b600052602260045260246000fd5b50919050565b6080516119fe62000584600039600061025d01526119fe6000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c8063715018a6116100c3578063a22cb4651161007c578063a22cb465146102b5578063b88d4fde146102c8578063c87b56dd146102db578063e89e106a146102ee578063e985e9c5146102f7578063f2fde38b1461033357600080fd5b8063715018a6146102535780637a5caab31461025b5780638da5cb5b146102815780639336b5dd1461029257806395d89b411461029a5780639fd4474b146102a257600080fd5b806323b872dd1161011557806323b872dd146101e257806340c10f19146101f557806342842e0e146102085780636352211e1461021b5780636e02007d1461022e57806370a082311461024057600080fd5b806301ffc9a7146101525780630684908f1461017a57806306fdde031461019a578063081812fc146101a2578063095ea7b3146101cd575b600080fd5b610165610160366004611511565b610346565b60405190151581526020015b60405180910390f35b61018d61018836600461152e565b610398565b604051610171919061159f565b61018d610447565b6101b56101b036600461152e565b6104d9565b6040516001600160a01b039091168152602001610171565b6101e06101db3660046115ce565b610500565b005b6101e06101f03660046115f8565b61061b565b6101e06102033660046115ce565b61064c565b6101e06102163660046115f8565b610818565b6101b561022936600461152e565b610833565b6008545b604051908152602001610171565b61023261024e366004611634565b610893565b6101e0610919565b7f0000000000000000000000000000000000000000000000000000000000000000610232565b6007546001600160a01b03166101b5565b600c54610232565b61018d61092d565b6102326102b036600461152e565b61093c565b6101e06102c336600461164f565b610963565b6101e06102d63660046116a1565b610972565b61018d6102e936600461152e565b6109aa565b61023260095481565b61016561030536600461177d565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6101e0610341366004611634565b610abb565b60006001600160e01b031982166380ac58cd60e01b148061037757506001600160e01b03198216635b5e139f60e01b145b8061039257506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600a82815481106103ad576103ad6117b0565b9060005260206000200180546103c2906117c6565b80601f01602080910402602001604051908101604052809291908181526020018280546103ee906117c6565b801561043b5780601f106104105761010080835404028352916020019161043b565b820191906000526020600020905b81548152906001019060200180831161041e57829003601f168201915b50505050509050919050565b606060008054610456906117c6565b80601f0160208091040260200160405190810160405280929190818152602001828054610482906117c6565b80156104cf5780601f106104a4576101008083540402835291602001916104cf565b820191906000526020600020905b8154815290600101906020018083116104b257829003601f168201915b5050505050905090565b60006104e482610b34565b506000908152600460205260409020546001600160a01b031690565b600061050b82610833565b9050806001600160a01b0316836001600160a01b0316141561057e5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061059a575061059a8133610305565b61060c5760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c00006064820152608401610575565b6106168383610b93565b505050565b6106253382610c01565b6106415760405162461bcd60e51b815260040161057590611801565b610616838383610c7f565b610654610e1b565b6001600c60008282546106679190611865565b909155505060085461067a81600161187c565b600855600061068a6064846118aa565b90506000600b6000815481106106a2576106a26117b0565b90600052602060002001548210156106bc57506000610717565b600b6001815481106106d0576106d06117b0565b9060005260206000200154600b6000815481106106ef576106ef6117b0565b9060005260206000200154610704919061187c565b82101561071357506001610717565b5060025b6107218584610e75565b6107d083600a8381548110610738576107386117b0565b90600052602060002001805461074d906117c6565b80601f0160208091040260200160405190810160405280929190818152602001828054610779906117c6565b80156107c65780601f1061079b576101008083540402835291602001916107c6565b820191906000526020600020905b8154815290600101906020018083116107a957829003601f168201915b5050505050610e8f565b604080518281526001600160a01b03871660208201527f769eff512f395b679667e0062a0e31dad5d22dbc7e6b87f16c3de7e85e663460910160405180910390a15050505050565b61061683838360405180602001604052806000815250610972565b6000818152600260205260408120546001600160a01b0316806103925760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610575565b60006001600160a01b0382166108fd5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610575565b506001600160a01b031660009081526003602052604090205490565b610921610e1b565b61092b6000610f29565b565b606060018054610456906117c6565b6000600b8281548110610951576109516117b0565b90600052602060002001549050919050565b61096e338383610f7b565b5050565b61097c3383610c01565b6109985760405162461bcd60e51b815260040161057590611801565b6109a48484848461104a565b50505050565b60606109b582610b34565b600082815260066020526040812080546109ce906117c6565b80601f01602080910402602001604051908101604052809291908181526020018280546109fa906117c6565b8015610a475780601f10610a1c57610100808354040283529160200191610a47565b820191906000526020600020905b815481529060010190602001808311610a2a57829003601f168201915b505050505090506000610a6560408051602081019091526000815290565b9050805160001415610a78575092915050565b815115610aaa578082604051602001610a929291906118be565b60405160208183030381529060405292505050919050565b610ab38461107d565b949350505050565b610ac3610e1b565b6001600160a01b038116610b285760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610575565b610b3181610f29565b50565b6000818152600260205260409020546001600160a01b0316610b315760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610575565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610bc882610833565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610c0d83610833565b9050806001600160a01b0316846001600160a01b03161480610c5457506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80610ab35750836001600160a01b0316610c6d846104d9565b6001600160a01b031614949350505050565b826001600160a01b0316610c9282610833565b6001600160a01b031614610cf65760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610575565b6001600160a01b038216610d585760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610575565b610d63600082610b93565b6001600160a01b0383166000908152600360205260408120805460019290610d8c908490611865565b90915550506001600160a01b0382166000908152600360205260408120805460019290610dba90849061187c565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6007546001600160a01b0316331461092b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610575565b61096e8282604051806020016040528060008152506110f1565b6000828152600260205260409020546001600160a01b0316610f0a5760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b6064820152608401610575565b6000828152600660209081526040909120825161061692840190611462565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b03161415610fdd5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610575565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611055848484610c7f565b61106184848484611124565b6109a45760405162461bcd60e51b8152600401610575906118ed565b606061108882610b34565b600061109f60408051602081019091526000815290565b905060008151116110bf57604051806020016040528060008152506110ea565b806110c984611222565b6040516020016110da9291906118be565b6040516020818303038152906040525b9392505050565b6110fb8383611320565b6111086000848484611124565b6106165760405162461bcd60e51b8152600401610575906118ed565b60006001600160a01b0384163b1561121757604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061116890339089908890889060040161193f565b6020604051808303816000875af19250505080156111a3575060408051601f3d908101601f191682019092526111a09181019061197c565b60015b6111fd573d8080156111d1576040519150601f19603f3d011682016040523d82523d6000602084013e6111d6565b606091505b5080516111f55760405162461bcd60e51b8152600401610575906118ed565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610ab3565b506001949350505050565b6060816112465750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611270578061125a81611999565b91506112699050600a836119b4565b915061124a565b60008167ffffffffffffffff81111561128b5761128b61168b565b6040519080825280601f01601f1916602001820160405280156112b5576020820181803683370190505b5090505b8415610ab3576112ca600183611865565b91506112d7600a866118aa565b6112e290603061187c565b60f81b8183815181106112f7576112f76117b0565b60200101906001600160f81b031916908160001a905350611319600a866119b4565b94506112b9565b6001600160a01b0382166113765760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610575565b6000818152600260205260409020546001600160a01b0316156113db5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610575565b6001600160a01b038216600090815260036020526040812080546001929061140490849061187c565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b82805461146e906117c6565b90600052602060002090601f01602090048101928261149057600085556114d6565b82601f106114a957805160ff19168380011785556114d6565b828001600101855582156114d6579182015b828111156114d65782518255916020019190600101906114bb565b506114e29291506114e6565b5090565b5b808211156114e257600081556001016114e7565b6001600160e01b031981168114610b3157600080fd5b60006020828403121561152357600080fd5b81356110ea816114fb565b60006020828403121561154057600080fd5b5035919050565b60005b8381101561156257818101518382015260200161154a565b838111156109a45750506000910152565b6000815180845261158b816020860160208601611547565b601f01601f19169290920160200192915050565b6020815260006110ea6020830184611573565b80356001600160a01b03811681146115c957600080fd5b919050565b600080604083850312156115e157600080fd5b6115ea836115b2565b946020939093013593505050565b60008060006060848603121561160d57600080fd5b611616846115b2565b9250611624602085016115b2565b9150604084013590509250925092565b60006020828403121561164657600080fd5b6110ea826115b2565b6000806040838503121561166257600080fd5b61166b836115b2565b91506020830135801515811461168057600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600080600080608085870312156116b757600080fd5b6116c0856115b2565b93506116ce602086016115b2565b925060408501359150606085013567ffffffffffffffff808211156116f257600080fd5b818701915087601f83011261170657600080fd5b8135818111156117185761171861168b565b604051601f8201601f19908116603f011681019083821181831017156117405761174061168b565b816040528281528a602084870101111561175957600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561179057600080fd5b611799836115b2565b91506117a7602084016115b2565b90509250929050565b634e487b7160e01b600052603260045260246000fd5b600181811c908216806117da57607f821691505b602082108114156117fb57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b6000828210156118775761187761184f565b500390565b6000821982111561188f5761188f61184f565b500190565b634e487b7160e01b600052601260045260246000fd5b6000826118b9576118b9611894565b500690565b600083516118d0818460208801611547565b8351908301906118e4818360208801611547565b01949350505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061197290830184611573565b9695505050505050565b60006020828403121561198e57600080fd5b81516110ea816114fb565b60006000198214156119ad576119ad61184f565b5060010190565b6000826119c3576119c3611894565b50049056fea264697066735822122089d23cc30a3212310d23ad2b72b437ca594ad8a5266d0effd6c6bbc287418dd164736f6c634300080c0033a264697066735822122027327f83707da910bef29950ed773e6dea68c044abeef3bf3e74e7767736a07b64736f6c634300080c0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2979,
        "contract": "contracts/SosolNFTMarketplace.sol:SosolNFTMarketplace",
        "label": "_tableId",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2981,
        "contract": "contracts/SosolNFTMarketplace.sol:SosolNFTMarketplace",
        "label": "_tableName",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2984,
        "contract": "contracts/SosolNFTMarketplace.sol:SosolNFTMarketplace",
        "label": "_prefix",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 2987,
        "contract": "contracts/SosolNFTMarketplace.sol:SosolNFTMarketplace",
        "label": "_tableland",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ITablelandTables)2159"
      },
      {
        "astId": 2518,
        "contract": "contracts/SosolNFTMarketplace.sol:SosolNFTMarketplace",
        "label": "nftToOwner",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 2523,
        "contract": "contracts/SosolNFTMarketplace.sol:SosolNFTMarketplace",
        "label": "s_requestIdToNftRequest",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(NftRequest)2496_storage)"
      },
      {
        "astId": 2527,
        "contract": "contracts/SosolNFTMarketplace.sol:SosolNFTMarketplace",
        "label": "ownerToBalance",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2531,
        "contract": "contracts/SosolNFTMarketplace.sol:SosolNFTMarketplace",
        "label": "nftToTotalToken",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ITablelandTables)2159": {
        "encoding": "inplace",
        "label": "contract ITablelandTables",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(NftRequest)2496_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SosolNFTHandle.NftRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(NftRequest)2496_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(NftRequest)2496_storage": {
        "encoding": "inplace",
        "label": "struct SosolNFTHandle.NftRequest",
        "members": [
          {
            "astId": 2493,
            "contract": "contracts/SosolNFTMarketplace.sol:SosolNFTMarketplace",
            "label": "requester",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2495,
            "contract": "contracts/SosolNFTMarketplace.sol:SosolNFTMarketplace",
            "label": "nftContract",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}