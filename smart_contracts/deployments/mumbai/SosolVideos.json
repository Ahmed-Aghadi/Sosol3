{
  "address": "0x01986e10943cAf01aadeCdddE4AD2d9c4B523ffF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "x",
          "type": "address"
        }
      ],
      "name": "_addressToString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes1",
          "name": "b",
          "type": "bytes1"
        }
      ],
      "name": "char",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "c",
          "type": "bytes1"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTableId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTableName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "thumbnailCid",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "finalCid",
          "type": "string"
        }
      ],
      "name": "upload",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2def9151467d9fba873c3d0f5b5cefdb462e77695866af69c82d993f70bb7cc0",
  "receipt": {
    "to": null,
    "from": "0x0de82DCC40B8468639251b089f8b4A4400022e04",
    "contractAddress": "0x01986e10943cAf01aadeCdddE4AD2d9c4B523ffF",
    "transactionIndex": 37,
    "gasUsed": "934668",
    "logsBloom": "0x
    "blockHash": "0x3c5c4066cd35aa814bc91d4b83d48c45e034b6efae98d8f9bb9c1c6f250b74b3",
    "transactionHash": "0x2def9151467d9fba873c3d0f5b5cefdb462e77695866af69c82d993f70bb7cc0",
    "logs": [
      {
        "transactionIndex": 37,
        "blockNumber": 28617440,
        "transactionHash": "0x2def9151467d9fba873c3d0f5b5cefdb462e77695866af69c82d993f70bb7cc0",
        "address": "0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000001986e10943caf01aadecddde4ad2d9c4b523fff",
          "0x0000000000000000000000000000000000000000000000000000000000000db1"
        ],
        "data": "0x",
        "logIndex": 257,
        "blockHash": "0x3c5c4066cd35aa814bc91d4b83d48c45e034b6efae98d8f9bb9c1c6f250b74b3"
      },
      {
        "transactionIndex": 37,
        "blockNumber": 28617440,
        "transactionHash": "0x2def9151467d9fba873c3d0f5b5cefdb462e77695866af69c82d993f70bb7cc0",
        "address": "0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x00000000000000000000000001986e10943caf01aadecddde4ad2d9c4b523fff0000000000000000000000000000000000000000000000000000000000000db100000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000097435245415445205441424c4520736f736f6c335f38303030312028696420696e7465676572207072696d617279206b65792c2075736572416464726573732074657874204e4f54204e554c4c2c207469746c652074657874204e4f54204e554c4c2c207468756d626e61696c4369642074657874204e4f54204e554c4c2c2066696e616c4369642074657874204e4f54204e554c4c293b000000000000000000",
        "logIndex": 258,
        "blockHash": "0x3c5c4066cd35aa814bc91d4b83d48c45e034b6efae98d8f9bb9c1c6f250b74b3"
      },
      {
        "transactionIndex": 37,
        "blockNumber": 28617440,
        "transactionHash": "0x2def9151467d9fba873c3d0f5b5cefdb462e77695866af69c82d993f70bb7cc0",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000000de82dcc40b8468639251b089f8b4a4400022e04",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000006d947ecb842e40000000000000000000000000000000000000000000000005c3068563ec90c22000000000000000000000000000000000000000000001691b484461ee7333a4c0000000000000000000000000000000000000000000000005c298f0e5210c93e000000000000000000000000000000000000000000001691b48b1f66d3eb7d30",
        "logIndex": 259,
        "blockHash": "0x3c5c4066cd35aa814bc91d4b83d48c45e034b6efae98d8f9bb9c1c6f250b74b3"
      }
    ],
    "blockNumber": 28617440,
    "cumulativeGasUsed": "9072525",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4b48841d4b32c4650e4abc117a03fe8b51f38f68"
  ],
  "numDeployments": 1,
  "solcInputHash": "ee1db10d854d37d4921845e0b6158827",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"x\",\"type\":\"address\"}],\"name\":\"_addressToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes1\",\"name\":\"b\",\"type\":\"bytes1\"}],\"name\":\"char\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"c\",\"type\":\"bytes1\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTableId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTableName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"thumbnailCid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"finalCid\",\"type\":\"string\"}],\"name\":\"upload\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SosolVideos.sol\":\"SosolVideos\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@tableland/evm/contracts/ITablelandController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of a TablelandController compliant contract.\\n *\\n * This interface can be implemented to enabled advanced access control for a table.\\n * Call {ITablelandTables-setController} with the address of your implementation.\\n *\\n * See {test/TestTablelandController} for an example of token-gating table write-access.\\n */\\ninterface ITablelandController {\\n    /**\\n     * @dev Object defining how a table can be accessed.\\n     */\\n    struct Policy {\\n        // Whether or not the table should allow SQL INSERT statements.\\n        bool allowInsert;\\n        // Whether or not the table should allow SQL UPDATE statements.\\n        bool allowUpdate;\\n        // Whether or not the table should allow SQL DELETE statements.\\n        bool allowDelete;\\n        // A conditional clause used with SQL UPDATE and DELETE statements.\\n        // For example, a value of \\\"foo > 0\\\" will concatenate all SQL UPDATE\\n        // and/or DELETE statements with \\\"WHERE foo > 0\\\".\\n        // This can be useful for limiting how a table can be modified.\\n        // Use {Policies-joinClauses} to include more than one condition.\\n        string whereClause;\\n        // A conditional clause used with SQL INSERT statements.\\n        // For example, a value of \\\"foo > 0\\\" will concatenate all SQL INSERT\\n        // statements with a check on the incoming data, i.e., \\\"CHECK (foo > 0)\\\".\\n        // This can be useful for limiting how table data ban be added.\\n        // Use {Policies-joinClauses} to include more than one condition.\\n        string withCheck;\\n        // A list of SQL column names that can be updated.\\n        string[] updatableColumns;\\n    }\\n\\n    /**\\n     * @dev Returns a {Policy} struct defining how a table can be accessed by `caller`.\\n     */\\n    function getPolicy(address caller) external payable returns (Policy memory);\\n}\\n\",\"keccak256\":\"0xda5f7e8144be7322e66e0f6652e040d2e8409345843d225efdd11adf05cddf1d\",\"license\":\"MIT\"},\"@tableland/evm/contracts/ITablelandTables.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ITablelandController.sol\\\";\\n\\n/**\\n * @dev Interface of a TablelandTables compliant contract.\\n */\\ninterface ITablelandTables {\\n    /**\\n     * The caller is not authorized.\\n     */\\n    error Unauthorized();\\n\\n    /**\\n     * RunSQL was called with a query length greater than maximum allowed.\\n     */\\n    error MaxQuerySizeExceeded(uint256 querySize, uint256 maxQuerySize);\\n\\n    /**\\n     * @dev Emitted when `owner` creates a new table.\\n     *\\n     * owner - the to-be owner of the table\\n     * tableId - the table id of the new table\\n     * statement - the SQL statement used to create the table\\n     */\\n    event CreateTable(address owner, uint256 tableId, string statement);\\n\\n    /**\\n     * @dev Emitted when a table is transferred from `from` to `to`.\\n     *\\n     * Not emmitted when a table is created.\\n     * Also emitted after a table has been burned.\\n     *\\n     * from - the address that transfered the table\\n     * to - the address that received the table\\n     * tableId - the table id that was transferred\\n     */\\n    event TransferTable(address from, address to, uint256 tableId);\\n\\n    /**\\n     * @dev Emitted when `caller` runs a SQL statement.\\n     *\\n     * caller - the address that is running the SQL statement\\n     * isOwner - whether or not the caller is the table owner\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     * policy - an object describing how `caller` can interact with the table (see {ITablelandController.Policy})\\n     */\\n    event RunSQL(\\n        address caller,\\n        bool isOwner,\\n        uint256 tableId,\\n        string statement,\\n        ITablelandController.Policy policy\\n    );\\n\\n    /**\\n     * @dev Emitted when a table's controller is set.\\n     *\\n     * tableId - the id of the target table\\n     * controller - the address of the controller (EOA or contract)\\n     */\\n    event SetController(uint256 tableId, address controller);\\n\\n    /**\\n     * @dev Creates a new table owned by `owner` using `statement` and returns its `tableId`.\\n     *\\n     * owner - the to-be owner of the new table\\n     * statement - the SQL statement used to create the table\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     */\\n    function createTable(address owner, string memory statement)\\n        external\\n        payable\\n        returns (uint256);\\n\\n    /**\\n     * @dev Runs a SQL statement for `caller` using `statement`.\\n     *\\n     * caller - the address that is running the SQL statement\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` or contract owner\\n     * - `tableId` must exist\\n     * - `caller` must be authorized by the table controller\\n     * - `statement` must be less than or equal to 35000 bytes\\n     */\\n    function runSQL(\\n        address caller,\\n        uint256 tableId,\\n        string memory statement\\n    ) external payable;\\n\\n    /**\\n     * @dev Sets the controller for a table. Controller can be an EOA or contract address.\\n     *\\n     * When a table is created, it's controller is set to the zero address, which means that the\\n     * contract will not enforce write access control. In this situation, validators will not accept\\n     * transactions from non-owners unless explicitly granted access with \\\"GRANT\\\" SQL statements.\\n     *\\n     * When a controller address is set for a table, validators assume write access control is\\n     * handled at the contract level, and will accept all transactions.\\n     *\\n     * You can unset a controller address for a table by setting it back to the zero address.\\n     * This will cause validators to revert back to honoring owner and GRANT bases write access control.\\n     *\\n     * caller - the address that is setting the controller\\n     * tableId - the id of the target table\\n     * controller - the address of the controller (EOA or contract)\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` or contract owner and owner of `tableId`\\n     * - `tableId` must exist\\n     * - `tableId` controller must not be locked\\n     */\\n    function setController(\\n        address caller,\\n        uint256 tableId,\\n        address controller\\n    ) external;\\n\\n    /**\\n     * @dev Returns the controller for a table.\\n     *\\n     * tableId - the id of the target table\\n     */\\n    function getController(uint256 tableId) external returns (address);\\n\\n    /**\\n     * @dev Locks the controller for a table _forever_. Controller can be an EOA or contract address.\\n     *\\n     * Although not very useful, it is possible to lock a table controller that is set to the zero address.\\n     *\\n     * caller - the address that is locking the controller\\n     * tableId - the id of the target table\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` or contract owner and owner of `tableId`\\n     * - `tableId` must exist\\n     * - `tableId` controller must not be locked\\n     */\\n    function lockController(address caller, uint256 tableId) external;\\n\\n    /**\\n     * @dev Sets the contract base URI.\\n     *\\n     * baseURI - the new base URI\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     */\\n    function setBaseURI(string memory baseURI) external;\\n\\n    /**\\n     * @dev Pauses the contract.\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     * - contract must be unpaused\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Unpauses the contract.\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     * - contract must be paused\\n     */\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0x597bb13cc0f1990cee44a423601b16a383fd9a405874eed18f7d5045a9cffa2f\",\"license\":\"MIT\"},\"contracts/SosolVideos.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@tableland/evm/contracts/ITablelandTables.sol\\\";\\n\\ncontract SosolVideos is ERC721Holder {\\n    uint256 private _tableId;\\n    string private _tableName;\\n    string private _prefix = \\\"sosol3\\\";\\n    // Interface to the `TablelandTables` registry contract\\n    ITablelandTables private _tableland;\\n\\n    constructor(address registry) {\\n        _tableland = ITablelandTables(registry);\\n        _tableId = _tableland.createTable(\\n            address(this),\\n            /*\\n             *  CREATE TABLE {prefix}_{chainId} (\\n             *    id integer primary key,\\n             *    message text\\n             *  );\\n             */\\n            string.concat(\\n                \\\"CREATE TABLE \\\",\\n                _prefix,\\n                \\\"_\\\",\\n                Strings.toString(block.chainid),\\n                \\\" (id integer primary key, userAddress text NOT NULL, title text NOT NULL, thumbnailCid text NOT NULL, finalCid text NOT NULL);\\\"\\n            )\\n        );\\n\\n        _tableName = string.concat(\\n            _prefix,\\n            \\\"_\\\",\\n            Strings.toString(block.chainid),\\n            \\\"_\\\",\\n            Strings.toString(_tableId)\\n        );\\n    }\\n\\n    // function create(string memory prefix) public payable {\\n    //     require(tableId == 0, \\\"Table already created!\\\");\\n    //     tableId = _tableland.createTable(\\n    //         address(this),\\n    //         /*\\n    //          *  CREATE TABLE {prefix}_{chainId} (\\n    //          *    id integer primary key,\\n    //          *    message text\\n    //          *  );\\n    //          */\\n    //         string.concat(\\n    //             \\\"CREATE TABLE \\\",\\n    //             prefix,\\n    //             \\\"_\\\",\\n    //             Strings.toString(block.chainid),\\n    //             \\\" (id integer primary key, userAddress text NOT NULL, title text NOT NULL, thumbnailCid text NOT NULL, videoCid text NOT NULL);\\\"\\n    //         )\\n    //     );\\n\\n    //     tableName = string.concat(\\n    //         prefix,\\n    //         \\\"_\\\",\\n    //         Strings.toString(block.chainid),\\n    //         \\\"_\\\",\\n    //         Strings.toString(tableId)\\n    //     );\\n    // }\\n\\n    function upload(\\n        string memory title,\\n        string memory thumbnailCid,\\n        string memory finalCid\\n    ) public {\\n        require(_tableId != 0, \\\"Table not created!\\\");\\n        _tableland.runSQL(\\n            address(this),\\n            _tableId,\\n            string.concat(\\n                \\\"INSERT INTO \\\",\\n                _tableName,\\n                \\\" (userAddress, title, thumbnailCid, finalCid) VALUES (\\\",\\n                \\\"'\\\",\\n                _addressToString(msg.sender),\\n                \\\"','\\\",\\n                title,\\n                \\\"','\\\",\\n                thumbnailCid,\\n                \\\"','\\\",\\n                finalCid,\\n                \\\"');\\\"\\n            )\\n        );\\n    }\\n\\n    function getTableName() public view returns (string memory) {\\n        return _tableName;\\n    }\\n\\n    function getTableId() public view returns (uint256) {\\n        return _tableId;\\n    }\\n\\n    function _addressToString(address x) public pure returns (string memory) {\\n        bytes memory s = new bytes(40);\\n        for (uint256 i = 0; i < 20; i++) {\\n            bytes1 b = bytes1(uint8(uint256(uint160(x)) / (2**(8 * (19 - i)))));\\n            bytes1 hi = bytes1(uint8(b) / 16);\\n            bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n            s[2 * i] = char(hi);\\n            s[2 * i + 1] = char(lo);\\n        }\\n        return string.concat(\\\"0x\\\", string(s));\\n    }\\n\\n    function char(bytes1 b) public pure returns (bytes1 c) {\\n        if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n        else return bytes1(uint8(b) + 0x57);\\n    }\\n}\\n\",\"keccak256\":\"0x011bf07fcba0d5f04e63c9c86d71fd25a316f4435704d1cd1177209183c48083\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040526006608081905265736f736f6c3360d01b60a0908152620000299160029190620002b3565b503480156200003757600080fd5b506040516200138f3803806200138f8339810160408190526200005a9162000359565b600380546001600160a01b0319166001600160a01b038316908117909155633a9151b0306002620000974662000196602090811b6200043b17901c565b604051602001620000aa9291906200049d565b6040516020818303038152906040526040518363ffffffff1660e01b8152600401620000d892919062000585565b6020604051808303816000875af1158015620000f8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200011e9190620005c9565b60008190555060026200013c466200019660201b6200043b1760201c565b620001546000546200019660201b6200043b1760201c565b6040516020016200016893929190620005e3565b604051602081830303815290604052600190805190602001906200018e929190620002b3565b505062000711565b606081620001bb5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115620001eb5780620001d2816200064e565b9150620001e39050600a8362000682565b9150620001bf565b6000816001600160401b0381111562000208576200020862000699565b6040519080825280601f01601f19166020018201604052801562000233576020820181803683370190505b5090505b8415620002ab576200024b600183620006af565b91506200025a600a86620006c9565b62000267906030620006e0565b60f81b8183815181106200027f576200027f620006fb565b60200101906001600160f81b031916908160001a905350620002a3600a8662000682565b945062000237565b949350505050565b828054620002c1906200038b565b90600052602060002090601f016020900481019282620002e5576000855562000330565b82601f106200030057805160ff191683800117855562000330565b8280016001018555821562000330579182015b828111156200033057825182559160200191906001019062000313565b506200033e92915062000342565b5090565b5b808211156200033e576000815560010162000343565b6000602082840312156200036c57600080fd5b81516001600160a01b03811681146200038457600080fd5b9392505050565b600181811c90821680620003a057607f821691505b60208210811415620003c257634e487b7160e01b600052602260045260246000fd5b50919050565b8054600090600181811c9080831680620003e357607f831692505b60208084108214156200040657634e487b7160e01b600052602260045260246000fd5b8180156200041d57600181146200042f576200045e565b60ff198616895284890196506200045e565b60008881526020902060005b86811015620004565781548b8201529085019083016200043b565b505084890196505b50505050505092915050565b60005b83811015620004875781810151838201526020016200046d565b8381111562000497576000848401525b50505050565b6c021a922a0aa22902a20a126229609d1b81526000620004c1600d830185620003c8565b605f60f81b81528351620004dd8160018401602088016200046a565b7f2028696420696e7465676572207072696d617279206b65792c20757365724164600192909101918201527f64726573732074657874204e4f54204e554c4c2c207469746c6520746578742060218201527f4e4f54204e554c4c2c207468756d626e61696c4369642074657874204e4f542060418201527f4e554c4c2c2066696e616c4369642074657874204e4f54204e554c4c293b00006061820152607f01949350505050565b60018060a01b03831681526040602082015260008251806040840152620005b48160608501602087016200046a565b601f01601f1916919091016060019392505050565b600060208284031215620005dc57600080fd5b5051919050565b6000620005f18286620003c8565b605f60f81b80825285516200060e816001850160208a016200046a565b600192019182015283516200062b8160028401602088016200046a565b0160020195945050505050565b634e487b7160e01b600052601160045260246000fd5b600060001982141562000665576200066562000638565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826200069457620006946200066c565b500490565b634e487b7160e01b600052604160045260246000fd5b600082821015620006c457620006c462000638565b500390565b600082620006db57620006db6200066c565b500690565b60008219821115620006f657620006f662000638565b500190565b634e487b7160e01b600052603260045260246000fd5b610c6e80620007216000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063150b7a02146100675780635d5a33a2146100a357806369f9ad2f146100b857806388e4f1cb146100e457806388e9a48a146100f55780638dee819214610108575b600080fd5b6100856100753660046105e2565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020015b60405180910390f35b6100ab61011d565b60405161009a91906106b9565b6100cb6100c63660046106d3565b6101af565b6040516001600160f81b0319909116815260200161009a565b60005460405190815260200161009a565b6100ab6101033660046106fd565b6101ea565b61011b610116366004610738565b610353565b005b60606001805461012c906107bf565b80601f0160208091040260200160405190810160405280929190818152602001828054610158906107bf565b80156101a55780601f1061017a576101008083540402835291602001916101a5565b820191906000526020600020905b81548152906001019060200180831161018857829003601f168201915b5050505050905090565b6000600a60f883901c10156101d6576101cd60f883901c6030610810565b60f81b92915050565b6101cd60f883901c6057610810565b919050565b60408051602880825260608281019093526000919060208201818036833701905050905060005b601481101561032a576000610227826013610835565b61023290600861084c565b61023d906002610951565b610250906001600160a01b038716610973565b60f81b9050600060108260f81c6102679190610987565b60f81b905060008160f81c601061027e91906109a9565b8360f81c61028c91906109ca565b60f81b905061029a826101af565b856102a686600261084c565b815181106102b6576102b66109ed565b60200101906001600160f81b031916908160001a9053506102d6816101af565b856102e286600261084c565b6102ed906001610a03565b815181106102fd576102fd6109ed565b60200101906001600160f81b031916908160001a905350505050808061032290610a1b565b915050610211565b508060405160200161033c9190610a52565b604051602081830303815290604052915050919050565b60005461039b5760405162461bcd60e51b81526020600482015260126024820152715461626c65206e6f7420637265617465642160701b604482015260640160405180910390fd5b6003546000546001600160a01b039091169063eaf5d04e90309060016103c0336101ea565b8888886040516020016103d7959493929190610a87565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161040493929190610bf4565b600060405180830381600087803b15801561041e57600080fd5b505af1158015610432573d6000803e3d6000fd5b50505050505050565b60608161045f5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610489578061047381610a1b565b91506104829050600a83610973565b9150610463565b6000816001600160401b038111156104a3576104a3610557565b6040519080825280601f01601f1916602001820160405280156104cd576020820181803683370190505b5090505b8415610538576104e2600183610835565b91506104ef600a86610c24565b6104fa906030610a03565b60f81b81838151811061050f5761050f6109ed565b60200101906001600160f81b031916908160001a905350610531600a86610973565b94506104d1565b949350505050565b80356001600160a01b03811681146101e557600080fd5b634e487b7160e01b600052604160045260246000fd5b60006001600160401b038084111561058757610587610557565b604051601f8501601f19908116603f011681019082821181831017156105af576105af610557565b816040528093508581528686860111156105c857600080fd5b858560208301376000602087830101525050509392505050565b600080600080608085870312156105f857600080fd5b61060185610540565b935061060f60208601610540565b92506040850135915060608501356001600160401b0381111561063157600080fd5b8501601f8101871361064257600080fd5b6106518782356020840161056d565b91505092959194509250565b60005b83811015610678578181015183820152602001610660565b83811115610687576000848401525b50505050565b600081518084526106a581602086016020860161065d565b601f01601f19169290920160200192915050565b6020815260006106cc602083018461068d565b9392505050565b6000602082840312156106e557600080fd5b81356001600160f81b0319811681146106cc57600080fd5b60006020828403121561070f57600080fd5b6106cc82610540565b600082601f83011261072957600080fd5b6106cc8383356020850161056d565b60008060006060848603121561074d57600080fd5b83356001600160401b038082111561076457600080fd5b61077087838801610718565b9450602086013591508082111561078657600080fd5b61079287838801610718565b935060408601359150808211156107a857600080fd5b506107b586828701610718565b9150509250925092565b600181811c908216806107d357607f821691505b602082108114156107f457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff84168060ff0382111561082d5761082d6107fa565b019392505050565b600082821015610847576108476107fa565b500390565b6000816000190483118215151615610866576108666107fa565b500290565b600181815b808511156108a657816000190482111561088c5761088c6107fa565b8085161561089957918102915b93841c9390800290610870565b509250929050565b6000826108bd5750600161094b565b816108ca5750600061094b565b81600181146108e057600281146108ea57610906565b600191505061094b565b60ff8411156108fb576108fb6107fa565b50506001821b61094b565b5060208310610133831016604e8410600b8410161715610929575081810a61094b565b610933838361086b565b8060001904821115610947576109476107fa565b0290505b92915050565b60006106cc83836108ae565b634e487b7160e01b600052601260045260246000fd5b6000826109825761098261095d565b500490565b600060ff83168061099a5761099a61095d565b8060ff84160491505092915050565b600060ff821660ff84168160ff0481118215151615610947576109476107fa565b600060ff821660ff8416808210156109e4576109e46107fa565b90039392505050565b634e487b7160e01b600052603260045260246000fd5b60008219821115610a1657610a166107fa565b500190565b6000600019821415610a2f57610a2f6107fa565b5060010190565b60008151610a4881856020860161065d565b9290920192915050565b61060f60f31b815260008251610a6f81600285016020870161065d565b9190910160020192915050565b62272c2760e81b9052565b6b024a729a2a92a1024a72a27960a51b81526000600c6000885481600182811c915080831680610ab857607f831692505b6020808410821415610ad857634e487b7160e01b86526022600452602486fd5b818015610aec5760018114610b0157610b32565b60ff1986168a890152848a0188019650610b32565b60008f81526020902060005b86811015610b285781548c82018b0152908501908301610b0d565b505087858b010196505b50507f202875736572416464726573732c207469746c652c207468756d626e61696c43855250750d2c85840ccd2dcc2d886d2c85240ac8298aa8aa640560531b602085015260368401602760f81b81529450610b908186018c610a36565b945050505050610b9f81610a7c565b610bac6003820187610a36565b9050610bb781610a7c565b610bc46003820186610a36565b9050610bcf81610a7c565b610bdc6003820185610a36565b6227293b60e81b815260030198975050505050505050565b60018060a01b0384168152826020820152606060408201526000610c1b606083018461068d565b95945050505050565b600082610c3357610c3361095d565b50069056fea26469706673582212202aad2a1f2a169ab1c1dd165bf165928f696f35c5d8b830ae3fb00ce665259fe764736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c8063150b7a02146100675780635d5a33a2146100a357806369f9ad2f146100b857806388e4f1cb146100e457806388e9a48a146100f55780638dee819214610108575b600080fd5b6100856100753660046105e2565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020015b60405180910390f35b6100ab61011d565b60405161009a91906106b9565b6100cb6100c63660046106d3565b6101af565b6040516001600160f81b0319909116815260200161009a565b60005460405190815260200161009a565b6100ab6101033660046106fd565b6101ea565b61011b610116366004610738565b610353565b005b60606001805461012c906107bf565b80601f0160208091040260200160405190810160405280929190818152602001828054610158906107bf565b80156101a55780601f1061017a576101008083540402835291602001916101a5565b820191906000526020600020905b81548152906001019060200180831161018857829003601f168201915b5050505050905090565b6000600a60f883901c10156101d6576101cd60f883901c6030610810565b60f81b92915050565b6101cd60f883901c6057610810565b919050565b60408051602880825260608281019093526000919060208201818036833701905050905060005b601481101561032a576000610227826013610835565b61023290600861084c565b61023d906002610951565b610250906001600160a01b038716610973565b60f81b9050600060108260f81c6102679190610987565b60f81b905060008160f81c601061027e91906109a9565b8360f81c61028c91906109ca565b60f81b905061029a826101af565b856102a686600261084c565b815181106102b6576102b66109ed565b60200101906001600160f81b031916908160001a9053506102d6816101af565b856102e286600261084c565b6102ed906001610a03565b815181106102fd576102fd6109ed565b60200101906001600160f81b031916908160001a905350505050808061032290610a1b565b915050610211565b508060405160200161033c9190610a52565b604051602081830303815290604052915050919050565b60005461039b5760405162461bcd60e51b81526020600482015260126024820152715461626c65206e6f7420637265617465642160701b604482015260640160405180910390fd5b6003546000546001600160a01b039091169063eaf5d04e90309060016103c0336101ea565b8888886040516020016103d7959493929190610a87565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161040493929190610bf4565b600060405180830381600087803b15801561041e57600080fd5b505af1158015610432573d6000803e3d6000fd5b50505050505050565b60608161045f5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610489578061047381610a1b565b91506104829050600a83610973565b9150610463565b6000816001600160401b038111156104a3576104a3610557565b6040519080825280601f01601f1916602001820160405280156104cd576020820181803683370190505b5090505b8415610538576104e2600183610835565b91506104ef600a86610c24565b6104fa906030610a03565b60f81b81838151811061050f5761050f6109ed565b60200101906001600160f81b031916908160001a905350610531600a86610973565b94506104d1565b949350505050565b80356001600160a01b03811681146101e557600080fd5b634e487b7160e01b600052604160045260246000fd5b60006001600160401b038084111561058757610587610557565b604051601f8501601f19908116603f011681019082821181831017156105af576105af610557565b816040528093508581528686860111156105c857600080fd5b858560208301376000602087830101525050509392505050565b600080600080608085870312156105f857600080fd5b61060185610540565b935061060f60208601610540565b92506040850135915060608501356001600160401b0381111561063157600080fd5b8501601f8101871361064257600080fd5b6106518782356020840161056d565b91505092959194509250565b60005b83811015610678578181015183820152602001610660565b83811115610687576000848401525b50505050565b600081518084526106a581602086016020860161065d565b601f01601f19169290920160200192915050565b6020815260006106cc602083018461068d565b9392505050565b6000602082840312156106e557600080fd5b81356001600160f81b0319811681146106cc57600080fd5b60006020828403121561070f57600080fd5b6106cc82610540565b600082601f83011261072957600080fd5b6106cc8383356020850161056d565b60008060006060848603121561074d57600080fd5b83356001600160401b038082111561076457600080fd5b61077087838801610718565b9450602086013591508082111561078657600080fd5b61079287838801610718565b935060408601359150808211156107a857600080fd5b506107b586828701610718565b9150509250925092565b600181811c908216806107d357607f821691505b602082108114156107f457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff84168060ff0382111561082d5761082d6107fa565b019392505050565b600082821015610847576108476107fa565b500390565b6000816000190483118215151615610866576108666107fa565b500290565b600181815b808511156108a657816000190482111561088c5761088c6107fa565b8085161561089957918102915b93841c9390800290610870565b509250929050565b6000826108bd5750600161094b565b816108ca5750600061094b565b81600181146108e057600281146108ea57610906565b600191505061094b565b60ff8411156108fb576108fb6107fa565b50506001821b61094b565b5060208310610133831016604e8410600b8410161715610929575081810a61094b565b610933838361086b565b8060001904821115610947576109476107fa565b0290505b92915050565b60006106cc83836108ae565b634e487b7160e01b600052601260045260246000fd5b6000826109825761098261095d565b500490565b600060ff83168061099a5761099a61095d565b8060ff84160491505092915050565b600060ff821660ff84168160ff0481118215151615610947576109476107fa565b600060ff821660ff8416808210156109e4576109e46107fa565b90039392505050565b634e487b7160e01b600052603260045260246000fd5b60008219821115610a1657610a166107fa565b500190565b6000600019821415610a2f57610a2f6107fa565b5060010190565b60008151610a4881856020860161065d565b9290920192915050565b61060f60f31b815260008251610a6f81600285016020870161065d565b9190910160020192915050565b62272c2760e81b9052565b6b024a729a2a92a1024a72a27960a51b81526000600c6000885481600182811c915080831680610ab857607f831692505b6020808410821415610ad857634e487b7160e01b86526022600452602486fd5b818015610aec5760018114610b0157610b32565b60ff1986168a890152848a0188019650610b32565b60008f81526020902060005b86811015610b285781548c82018b0152908501908301610b0d565b505087858b010196505b50507f202875736572416464726573732c207469746c652c207468756d626e61696c43855250750d2c85840ccd2dcc2d886d2c85240ac8298aa8aa640560531b602085015260368401602760f81b81529450610b908186018c610a36565b945050505050610b9f81610a7c565b610bac6003820187610a36565b9050610bb781610a7c565b610bc46003820186610a36565b9050610bcf81610a7c565b610bdc6003820185610a36565b6227293b60e81b815260030198975050505050505050565b60018060a01b0384168152826020820152606060408201526000610c1b606083018461068d565b95945050505050565b600082610c3357610c3361095d565b50069056fea26469706673582212202aad2a1f2a169ab1c1dd165bf165928f696f35c5d8b830ae3fb00ce665259fe764736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3258,
        "contract": "contracts/SosolVideos.sol:SosolVideos",
        "label": "_tableId",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3260,
        "contract": "contracts/SosolVideos.sol:SosolVideos",
        "label": "_tableName",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 3263,
        "contract": "contracts/SosolVideos.sol:SosolVideos",
        "label": "_prefix",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 3266,
        "contract": "contracts/SosolVideos.sol:SosolVideos",
        "label": "_tableland",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ITablelandTables)2159"
      }
    ],
    "types": {
      "t_contract(ITablelandTables)2159": {
        "encoding": "inplace",
        "label": "contract ITablelandTables",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}